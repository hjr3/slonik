{"version":3,"sources":["../../src/factories/createPrimitiveValueExpressions.js"],"names":["log","Logger","child","namespace","values","primitiveValueExpressions","value","Array","isArray","push","warn","UnexpectedStateError"],"mappings":";;;;;;;AAEA;;AACA;;;;AAOA,MAAMA,GAAG,GAAGC,gBAAOC,KAAP,CAAa;AACvBC,EAAAA,SAAS,EAAE;AADY,CAAb,CAAZ;;wCAIgBC,M,IAA4E;AAC1F,QAAMC,yBAAyB,GAAG,EAAlC;;AAEA,OAAK,MAAMC,KAAX,IAAoBF,MAApB,EAA4B;AAC1B,QAAIG,KAAK,CAACC,OAAN,CAAcF,KAAd,KAAwB,OAAOA,KAAP,KAAiB,QAAzC,IAAqD,OAAOA,KAAP,KAAiB,QAAtE,IAAkF,OAAOA,KAAP,KAAiB,SAAnG,IAAgHA,KAAK,KAAK,IAA9H,EAAoI;AAClID,MAAAA,yBAAyB,CAACI,IAA1B,CAA+BH,KAA/B;AACD,KAFD,MAEO;AACLN,MAAAA,GAAG,CAACU,IAAJ,CAAS;AACPJ,QAAAA,KADO;AAEPF,QAAAA;AAFO,OAAT,EAGG,6BAHH;AAKA,YAAM,IAAIO,4BAAJ,CAAyB,8BAAzB,CAAN;AACD;AACF;;AAED,SAAON,yBAAP;AACD,C","sourcesContent":["// @flow\n\nimport Logger from '../Logger';\nimport {\n  UnexpectedStateError,\n} from '../errors';\nimport type {\n  PrimitiveValueExpressionType,\n} from '../types';\n\nconst log = Logger.child({\n  namespace: 'createPrimitiveValueExpressions',\n});\n\nexport default (values: $ReadOnlyArray<*>): $ReadOnlyArray<PrimitiveValueExpressionType> => {\n  const primitiveValueExpressions = [];\n\n  for (const value of values) {\n    if (Array.isArray(value) || typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean' || value === null) {\n      primitiveValueExpressions.push(value);\n    } else {\n      log.warn({\n        value,\n        values,\n      }, 'unexpected value expression');\n\n      throw new UnexpectedStateError('Unexpected value expression.');\n    }\n  }\n\n  return primitiveValueExpressions;\n};\n"],"file":"createPrimitiveValueExpressions.js"}