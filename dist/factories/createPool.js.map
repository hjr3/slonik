{"version":3,"sources":["../../src/factories/createPool.js"],"names":["connectionUri","clientConfigurationInput","clientConfiguration","poolId","poolLog","Logger","child","poolConfiguration","pgNativeBindingsAreAvailable","require","debug","pg","native","preferNativeBindings","info","pool","Pool","slonik","ended","mock","typeOverrides","on","error","client","connection","terminated","connectionId","transactionDepth","message","includes","notice","level","name","processId","processID","stats","idleConnectionCount","idleCount","totalConnectionCount","totalCount","waitingRequestCount","waitingCount"],"mappings":"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","sourcesContent":["// @flow\n\nimport {\n  serializeError,\n} from 'serialize-error';\nimport {\n  createUlid,\n} from '../utilities';\nimport type {\n  ClientConfigurationInputType,\n  DatabasePoolType,\n} from '../types';\nimport Logger from '../Logger';\nimport bindPool from '../binders/bindPool';\nimport createClientConfiguration from './createClientConfiguration';\nimport createPoolConfiguration from './createPoolConfiguration';\n\n/**\n * @param connectionUri PostgreSQL [Connection URI](https://www.postgresql.org/docs/current/libpq-connect.html#LIBPQ-CONNSTRING).\n */\nexport default (\n  connectionUri: string,\n  clientConfigurationInput?: ClientConfigurationInputType,\n): DatabasePoolType => {\n  const clientConfiguration = createClientConfiguration(clientConfigurationInput);\n\n  const poolId = createUlid();\n\n  const poolLog = Logger.child({\n    poolId,\n  });\n\n  const poolConfiguration = createPoolConfiguration(connectionUri, clientConfiguration);\n\n  let pgNativeBindingsAreAvailable = false;\n\n  try {\n    /* eslint-disable global-require, import/no-unassigned-import, import/no-extraneous-dependencies */\n    // $FlowFixMe\n    require('pg-native');\n    /* eslint-enable */\n\n    pgNativeBindingsAreAvailable = true;\n\n    poolLog.debug('found pg-native module');\n  } catch {\n    poolLog.debug('pg-native module is not found');\n  }\n\n  let pg;\n  let native = false;\n\n  if (clientConfiguration.preferNativeBindings && pgNativeBindingsAreAvailable) {\n    poolLog.info('using native libpq bindings');\n\n    // eslint-disable-next-line global-require\n    pg = require('pg').native;\n\n    native = true;\n  } else if (clientConfiguration.preferNativeBindings && !pgNativeBindingsAreAvailable) {\n    poolLog.info('using JavaScript bindings; pg-native not found');\n\n    // eslint-disable-next-line global-require\n    pg = require('pg');\n  } else {\n    poolLog.info('using JavaScript bindings');\n\n    // eslint-disable-next-line global-require\n    pg = require('pg');\n  }\n\n  const pool = new pg.Pool(poolConfiguration);\n\n  pool.slonik = {\n    ended: false,\n    mock: false,\n    native,\n    poolId,\n    typeOverrides: null,\n  };\n\n  // istanbul ignore next\n  pool.on('error', (error) => {\n    if (!error.client.connection.slonik.terminated) {\n      poolLog.error({\n        error: serializeError(error),\n      }, 'client connection error');\n    }\n  });\n\n  // istanbul ignore next\n  pool.on('connect', (client) => {\n    client.connection = client.connection || {};\n\n    client.connection.slonik = {\n      connectionId: createUlid(),\n      mock: false,\n      native,\n      terminated: null,\n      transactionDepth: null,\n    };\n\n    client.on('error', (error) => {\n      if (error.message.includes('Connection terminated unexpectedly') || error.message.includes('server closed the connection unexpectedly')) {\n        client.connection.slonik.terminated = error;\n      }\n\n      poolLog.error({\n        error: serializeError(error),\n      }, 'client error');\n    });\n\n    client.on('notice', (notice) => {\n      poolLog.info({\n        notice: {\n          level: notice.name,\n          message: notice.message,\n        },\n      }, 'notice message');\n    });\n\n    poolLog.debug({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount,\n      },\n    }, 'created a new client connection');\n  });\n\n  // istanbul ignore next\n  pool.on('acquire', (client) => {\n    poolLog.debug({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount,\n      },\n    }, 'client is checked out from the pool');\n  });\n\n  // istanbul ignore next\n  pool.on('remove', (client) => {\n    poolLog.debug({\n      processId: client.processID,\n      stats: {\n        idleConnectionCount: pool.idleCount,\n        totalConnectionCount: pool.totalCount,\n        waitingRequestCount: pool.waitingCount,\n      },\n    }, 'client connection is closed and removed from the client pool');\n  });\n\n  return bindPool(\n    poolLog,\n    pool,\n    clientConfiguration,\n  );\n};\n"],"file":"createPool.js"}