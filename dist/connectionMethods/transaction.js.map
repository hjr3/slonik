{"version":3,"sources":["../../src/connectionMethods/transaction.js"],"names":["transaction","parentLog","connection","clientConfiguration","handler","slonik","transactionDepth","UnexpectedStateError","transactionId","transactionQueries","mock","query","log","child","result","terminated","BackendTerminatedError","error"],"mappings":";;;;;;;AAEA;;AAGA;;AAGA;;AAGA;;AAQA,MAAMA,WAA4C,GAAG,OAAOC,SAAP,EAAkBC,UAAlB,EAA8BC,mBAA9B,EAAmDC,OAAnD,KAA+D;AAClH,MAAIF,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,KAAkD,IAAtD,EAA4D;AAC1D,UAAM,IAAIC,4BAAJ,CAAyB,mGAAzB,CAAN;AACD;;AAEDL,EAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,GAAgD,CAAhD;AACAJ,EAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG,aAA7B,GAA6C,4BAA7C;AACAN,EAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BI,kBAA7B,GAAkD,EAAlD;;AAEA,MAAIP,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BK,IAA7B,KAAsC,KAA1C,EAAiD;AAC/C,UAAMR,UAAU,CAACS,KAAX,CAAiB,mBAAjB,CAAN;AACD;;AAED,QAAMC,GAAG,GAAGX,SAAS,CAACY,KAAV,CAAgB;AAC1BL,IAAAA,aAAa,EAAEN,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG;AADlB,GAAhB,CAAZ;;AAIA,MAAI;AACF,UAAMM,MAAM,GAAG,MAAMV,OAAO,CAAC,wCAC3BQ,GAD2B,EAE3BV,UAF2B,EAG3BC,mBAH2B,EAI3BD,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAJF,CAAD,CAA5B;;AAOA,QAAIJ,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BU,UAAjC,EAA6C;AAC3C,YAAM,IAAIC,8BAAJ,CAA2Bd,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BU,UAAxD,CAAN;AACD;;AAED,QAAIb,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BK,IAA7B,KAAsC,KAA1C,EAAiD;AAC/C,YAAMR,UAAU,CAACS,KAAX,CAAiB,QAAjB,CAAN;AACD;;AAED,WAAOG,MAAP;AACD,GAjBD,CAiBE,OAAOG,KAAP,EAAc;AACd,QAAI,CAACf,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BU,UAAlC,EAA8C;AAC5C,UAAIb,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BK,IAA7B,KAAsC,KAA1C,EAAiD;AAC/C,cAAMR,UAAU,CAACS,KAAX,CAAiB,UAAjB,CAAN;AACD;;AAEDC,MAAAA,GAAG,CAACK,KAAJ,CAAU;AACRA,QAAAA,KAAK,EAAE,oCAAeA,KAAf;AADC,OAAV,EAEG,0CAFH;AAGD;;AAED,UAAMA,KAAN;AACD,GA7BD,SA6BU;AACRf,IAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BC,gBAA7B,GAAgD,IAAhD;AACAJ,IAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BG,aAA7B,GAA6C,IAA7C;AACAN,IAAAA,UAAU,CAACA,UAAX,CAAsBG,MAAtB,CAA6BI,kBAA7B,GAAkD,IAAlD;AACD;AACF,CAnDD;;eAqDeT,W","sourcesContent":["// @flow\n\nimport {\n  serializeError,\n} from 'serialize-error';\nimport {\n  bindTransactionConnection,\n} from '../binders';\nimport {\n  createUlid,\n} from '../utilities';\nimport {\n  BackendTerminatedError,\n  UnexpectedStateError,\n} from '../errors';\nimport type {\n  InternalTransactionFunctionType,\n} from '../types';\n\nconst transaction: InternalTransactionFunctionType = async (parentLog, connection, clientConfiguration, handler) => {\n  if (connection.connection.slonik.transactionDepth !== null) {\n    throw new UnexpectedStateError('Cannot use the same connection to start a new transaction before completing the last transaction.');\n  }\n\n  connection.connection.slonik.transactionDepth = 0;\n  connection.connection.slonik.transactionId = createUlid();\n  connection.connection.slonik.transactionQueries = [];\n\n  if (connection.connection.slonik.mock === false) {\n    await connection.query('START TRANSACTION');\n  }\n\n  const log = parentLog.child({\n    transactionId: connection.connection.slonik.transactionId,\n  });\n\n  try {\n    const result = await handler(bindTransactionConnection(\n      log,\n      connection,\n      clientConfiguration,\n      connection.connection.slonik.transactionDepth,\n    ));\n\n    if (connection.connection.slonik.terminated) {\n      throw new BackendTerminatedError(connection.connection.slonik.terminated);\n    }\n\n    if (connection.connection.slonik.mock === false) {\n      await connection.query('COMMIT');\n    }\n\n    return result;\n  } catch (error) {\n    if (!connection.connection.slonik.terminated) {\n      if (connection.connection.slonik.mock === false) {\n        await connection.query('ROLLBACK');\n      }\n\n      log.error({\n        error: serializeError(error),\n      }, 'rolling back transaction due to an error');\n    }\n\n    throw error;\n  } finally {\n    connection.connection.slonik.transactionDepth = null;\n    connection.connection.slonik.transactionId = null;\n    connection.connection.slonik.transactionQueries = null;\n  }\n};\n\nexport default transaction;\n"],"file":"transaction.js"}