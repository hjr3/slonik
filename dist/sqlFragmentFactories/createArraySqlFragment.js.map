{"version":3,"sources":["../../src/sqlFragmentFactories/createArraySqlFragment.js"],"names":["token","greatestParameterPosition","placeholderIndex","value","values","InvalidInputError","sql","memberType","type","sqlFragment","length","push"],"mappings":";;;;;;;AAMA;;AAKA;;AAGA;;gCAIgBA,K,EAA0BC,yB,KAAuD;AAC/F,MAAIC,gBAAgB,GAAGD,yBAAvB;;AAEA,OAAK,MAAME,KAAX,IAAoBH,KAAK,CAACI,MAA1B,EAAkC;AAChC,QAAI,CAAC,2CAA2BD,KAA3B,CAAL,EAAwC;AACtC,YAAM,IAAIE,yBAAJ,CAAsB,kEAAtB,CAAN;AACD;AACF;;AAED,QAAMD,MAAM,GAAG,CACbJ,KAAK,CAACI,MADO,CAAf;AAIAF,EAAAA,gBAAgB;AAEhB,MAAII,GAAG,GAAG,MAAMJ,gBAAN,GAAyB,IAAnC;;AAEA,MAAI,2BAAWF,KAAK,CAACO,UAAjB,KAAgCP,KAAK,CAACO,UAAN,CAAiBC,IAAjB,KAA0B,kBAA9D,EAAkF;AAChF;AACA,UAAMC,WAAW,GAAG,0CAA0BT,KAAK,CAACO,UAAhC,EAA4CL,gBAA5C,CAApB;AAEAA,IAAAA,gBAAgB,IAAIO,WAAW,CAACL,MAAZ,CAAmBM,MAAvC;AAEAN,IAAAA,MAAM,CAACO,IAAP,CAAY,GAAGF,WAAW,CAACL,MAA3B;AAEAE,IAAAA,GAAG,IAAIG,WAAW,CAACH,GAAnB;AACD,GATD,MASO,IAAI,OAAON,KAAK,CAACO,UAAb,KAA4B,QAAhC,EAA0C;AAC/CD,IAAAA,GAAG,IAAI,iCAAiBN,KAAK,CAACO,UAAvB,IAAqC,IAA5C;AACD,GAFM,MAEA;AACL,UAAM,IAAIF,yBAAJ,CAAsB,iGAAtB,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,GADK;AAGL;AACAF,IAAAA;AAJK,GAAP;AAMD,C","sourcesContent":["// @flow\n\nimport type {\n  ArraySqlTokenType,\n  SqlFragmentType,\n} from '../types';\nimport {\n  escapeIdentifier,\n  isPrimitiveValueExpression,\n  isSqlToken,\n} from '../utilities';\nimport {\n  createSqlTokenSqlFragment,\n} from '../factories';\nimport {\n  InvalidInputError,\n} from '../errors';\n\nexport default (token: ArraySqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  let placeholderIndex = greatestParameterPosition;\n\n  for (const value of token.values) {\n    if (!isPrimitiveValueExpression(value)) {\n      throw new InvalidInputError('Invalid array member type. Must be a primitive value expression.');\n    }\n  }\n\n  const values = [\n    token.values,\n  ];\n\n  placeholderIndex++;\n\n  let sql = '$' + placeholderIndex + '::';\n\n  if (isSqlToken(token.memberType) && token.memberType.type === 'SLONIK_TOKEN_SQL') {\n    // $FlowFixMe\n    const sqlFragment = createSqlTokenSqlFragment(token.memberType, placeholderIndex);\n\n    placeholderIndex += sqlFragment.values.length;\n\n    values.push(...sqlFragment.values);\n\n    sql += sqlFragment.sql;\n  } else if (typeof token.memberType === 'string') {\n    sql += escapeIdentifier(token.memberType) + '[]';\n  } else {\n    throw new InvalidInputError('Unsupported `memberType`. `memberType` must be a string or SqlToken of \"SLONIK_TOKEN_SQL\" type.');\n  }\n\n  return {\n    sql,\n\n    // $FlowFixMe\n    values,\n  };\n};\n"],"file":"createArraySqlFragment.js"}