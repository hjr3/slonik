{"version":3,"sources":["../../src/sqlFragmentFactories/createBinarySqlFragment.js"],"names":["token","greatestParameterPosition","Buffer","isBuffer","data","InvalidInputError","sql","values"],"mappings":";;;;;;;AAMA;;iCAIgBA,K,EAA2BC,yB,KAAuD;AAChG,MAAI,CAACC,MAAM,CAACC,QAAP,CAAgBH,KAAK,CAACI,IAAtB,CAAL,EAAkC;AAChC,UAAM,IAAIC,yBAAJ,CAAsB,gCAAtB,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,GAAG,EAAE,OAAOL,yBAAyB,GAAG,CAAnC,CADA;AAELM,IAAAA,MAAM,EAAE,CACN;AACAP,IAAAA,KAAK,CAACI,IAFA;AAFH,GAAP;AAOD,C","sourcesContent":["// @flow\n\nimport type {\n  BinarySqlTokenType,\n  SqlFragmentType,\n} from '../types';\nimport {\n  InvalidInputError,\n} from '../errors';\n\nexport default (token: BinarySqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  if (!Buffer.isBuffer(token.data)) {\n    throw new InvalidInputError('Binary value must be a buffer.');\n  }\n\n  return {\n    sql: '$' + (greatestParameterPosition + 1),\n    values: [\n      // $FlowFixMe\n      token.data,\n    ],\n  };\n};\n"],"file":"createBinarySqlFragment.js"}