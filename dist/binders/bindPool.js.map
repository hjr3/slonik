{"version":3,"sources":["../../src/binders/bindPool.js"],"names":["parentLog","pool","clientConfiguration","mapConnection","targetMethodName","query","TypeError","connectionLog","connection","boundConnection","newPool","any","anyFirst","connect","connectionHandler","copyFromBinary","copyQuery","values","columnTypes","end","terminateIdleClients","activeConnectionCount","totalCount","idleCount","client","_clients","_remove","slonik","ended","Promise","resolve","on","getPoolState","idleConnectionCount","waitingClientCount","waitingCount","many","manyFirst","maybeOne","maybeOneFirst","one","oneFirst","stream","streamQuery","streamHandler","transaction","transactionHandler"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  ClientConfigurationType,\n  DatabasePoolType,\n  InternalDatabasePoolType,\n  LoggerType,\n  TaggedTemplateLiteralInvocationType,\n} from '../types';\nimport {\n  createConnection,\n} from '../factories';\nimport {\n  transaction,\n} from '../connectionMethods';\nimport {\n  assertSqlSqlToken,\n} from '../assertions';\n\nexport default (\n  parentLog: LoggerType,\n  pool: InternalDatabasePoolType,\n  clientConfiguration: ClientConfigurationType,\n): DatabasePoolType => {\n  // eslint-disable-next-line flowtype/no-weak-types\n  const mapConnection = (targetMethodName: string): any => {\n    return (query: TaggedTemplateLiteralInvocationType) => {\n      if (typeof query === 'string') {\n        throw new TypeError('Query must be constructed using `sql` tagged template literal.');\n      }\n\n      return createConnection(\n        parentLog,\n        pool,\n        clientConfiguration,\n        'IMPLICIT_QUERY',\n        (connectionLog, connection, boundConnection) => {\n          return boundConnection[targetMethodName](query);\n        },\n        (newPool) => {\n          return newPool[targetMethodName](query);\n        },\n        query,\n      );\n    };\n  };\n\n  return {\n    any: mapConnection('any'),\n    anyFirst: mapConnection('anyFirst'),\n    connect: (connectionHandler) => {\n      return createConnection(\n        parentLog,\n        pool,\n        clientConfiguration,\n        'EXPLICIT',\n        (connectionLog, connection, boundConnection) => {\n          return connectionHandler(boundConnection);\n        },\n        (newPool) => {\n          return newPool.connect(connectionHandler);\n        },\n      );\n    },\n    copyFromBinary: (copyQuery, values, columnTypes) => {\n      assertSqlSqlToken(copyQuery);\n\n      return createConnection(\n        parentLog,\n        pool,\n        clientConfiguration,\n        'IMPLICIT_QUERY',\n        (connectionLog, connection, boundConnection) => {\n          return boundConnection.copyFromBinary(\n            copyQuery,\n            values,\n            columnTypes,\n          );\n        },\n        (newPool) => {\n          return newPool.copyFromBinary(\n            copyQuery,\n            values,\n            columnTypes,\n          );\n        },\n      );\n    },\n    end: async () => {\n      const terminateIdleClients = () => {\n        const activeConnectionCount = pool.totalCount - pool.idleCount;\n\n        if (activeConnectionCount === 0) {\n          for (const client of pool._clients) {\n            pool._remove(client);\n          }\n        }\n      };\n\n      pool.slonik.ended = true;\n\n      return new Promise((resolve) => {\n        terminateIdleClients();\n\n        pool.on('remove', () => {\n          if (pool.totalCount === 0) {\n            resolve();\n          }\n        });\n\n        if (pool.totalCount === 0) {\n          resolve();\n        }\n      });\n    },\n    getPoolState: () => {\n      return {\n        activeConnectionCount: pool.totalCount - pool.idleCount,\n        ended: pool.slonik.ended,\n        idleConnectionCount: pool.idleCount,\n        waitingClientCount: pool.waitingCount,\n      };\n    },\n    many: mapConnection('many'),\n    manyFirst: mapConnection('manyFirst'),\n    maybeOne: mapConnection('maybeOne'),\n    maybeOneFirst: mapConnection('maybeOneFirst'),\n    one: mapConnection('one'),\n    oneFirst: mapConnection('oneFirst'),\n    query: mapConnection('query'),\n    stream: (streamQuery, streamHandler) => {\n      assertSqlSqlToken(streamQuery);\n\n      return createConnection(\n        parentLog,\n        pool,\n        clientConfiguration,\n        'IMPLICIT_QUERY',\n        (connectionLog, connection, boundConnection) => {\n          return boundConnection.stream(streamQuery, streamHandler);\n        },\n        (newPool) => {\n          return newPool.stream(streamQuery, streamHandler);\n        },\n        streamQuery,\n      );\n    },\n    transaction: async (transactionHandler) => {\n      return createConnection(\n        parentLog,\n        pool,\n        clientConfiguration,\n        'IMPLICIT_TRANSACTION',\n        (connectionLog, connection) => {\n          return transaction(connectionLog, connection, clientConfiguration, transactionHandler);\n        },\n        (newPool) => {\n          return newPool.transaction(transactionHandler);\n        },\n      );\n    },\n  };\n};\n"],"file":"bindPool.js"}