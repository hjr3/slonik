{"version":3,"sources":["../../src/factories/createSqlTag.js"],"names":["log","Logger","child","namespace","sql","parts","values","rawSql","parameterValues","index","part","token","length","undefined","debug","InvalidInputError","push","sqlFragment","error","constructedSql","offendingToken","TypeError","query","type","SqlToken","array","memberType","ArrayToken","binary","data","BinaryToken","identifier","names","IdentifierToken","json","value","JsonToken","join","members","glue","ListToken","unnest","tuples","columnTypes","UnnestToken"],"mappings":"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","sourcesContent":["// @flow\n\nimport type {\n  ArraySqlTokenType,\n  BinarySqlTokenType,\n  IdentifierSqlTokenType,\n  JsonSqlTokenType,\n  ListSqlTokenType,\n  PrimitiveValueExpressionType,\n  SerializableValueType,\n  SqlSqlTokenType,\n  SqlTaggedTemplateType,\n  SqlTokenType,\n  UnnestSqlTokenType,\n  ValueExpressionType,\n} from '../types';\nimport {\n  deepFreeze,\n  isPrimitiveValueExpression,\n  isSqlToken,\n} from '../utilities';\nimport Logger from '../Logger';\nimport {\n  ArrayToken,\n  BinaryToken,\n  IdentifierToken,\n  JsonToken,\n  ListToken,\n  SqlToken,\n  UnnestToken,\n} from '../tokens';\nimport {\n  InvalidInputError,\n} from '../errors';\nimport createSqlTokenSqlFragment from './createSqlTokenSqlFragment';\n\nconst log = Logger.child({\n  namespace: 'sql',\n});\n\nexport default () => {\n  /* eslint-disable complexity */\n  // $FlowFixMe\n  const sql: SqlTaggedTemplateType = (\n    parts: $ReadOnlyArray<string>,\n    ...values: $ReadOnlyArray<ValueExpressionType>\n  ): SqlSqlTokenType => {\n    let rawSql = '';\n\n    const parameterValues = [];\n\n    let index = 0;\n\n    for (const part of parts) {\n      const token = values[index++];\n\n      rawSql += part;\n\n      if (index >= parts.length) {\n        continue;\n      }\n\n      if (token === undefined) {\n        log.debug({\n          index,\n          values,\n        }, 'bound values');\n\n        throw new InvalidInputError('SQL tag cannot be bound an undefined value.');\n      } else if (isPrimitiveValueExpression(token)) {\n        rawSql += '$' + (parameterValues.length + 1);\n\n        parameterValues.push(token);\n      } else if (isSqlToken(token)) {\n        // $FlowFixMe\n        const sqlFragment = createSqlTokenSqlFragment(token, parameterValues.length);\n\n        rawSql += sqlFragment.sql;\n        parameterValues.push(...sqlFragment.values);\n      } else {\n        log.error({\n          constructedSql: rawSql,\n          index,\n          offendingToken: token,\n        }, 'unexpected value expression');\n\n        throw new TypeError('Unexpected value expression.');\n      }\n    }\n\n    const query = deepFreeze({\n      sql: rawSql,\n      type: SqlToken,\n      values: parameterValues,\n    });\n\n    return query;\n  };\n\n  sql.array = (\n    values: $ReadOnlyArray<PrimitiveValueExpressionType>,\n    memberType: string | SqlTokenType,\n  ): ArraySqlTokenType => {\n    return deepFreeze({\n      memberType,\n      type: ArrayToken,\n      values,\n    });\n  };\n\n  sql.binary = (\n    data: Buffer,\n  ): BinarySqlTokenType => {\n    return deepFreeze({\n      data,\n      type: BinaryToken,\n    });\n  };\n\n  sql.identifier = (\n    names: $ReadOnlyArray<string>,\n  ): IdentifierSqlTokenType => {\n    // @todo Replace `type` with a symbol once Flow adds symbol support\n    // @see https://github.com/facebook/flow/issues/810\n    return deepFreeze({\n      names,\n      type: IdentifierToken,\n    });\n  };\n\n  sql.json = (\n    value: SerializableValueType,\n  ): JsonSqlTokenType => {\n    return deepFreeze({\n      type: JsonToken,\n      value,\n    });\n  };\n\n  sql.join = (\n    members: $ReadOnlyArray<ValueExpressionType>,\n    glue: SqlTokenType,\n  ): ListSqlTokenType => {\n    return deepFreeze({\n      glue,\n      members,\n      type: ListToken,\n    });\n  };\n\n  sql.unnest = (\n    tuples: $ReadOnlyArray<$ReadOnlyArray<PrimitiveValueExpressionType>>,\n    columnTypes: $ReadOnlyArray<string>,\n  ): UnnestSqlTokenType => {\n    return deepFreeze({\n      columnTypes,\n      tuples,\n      type: UnnestToken,\n    });\n  };\n\n  return sql;\n};\n"],"file":"createSqlTag.js"}