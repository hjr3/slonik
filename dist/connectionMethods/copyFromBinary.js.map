{"version":3,"sources":["../../src/connectionMethods/copyFromBinary.js"],"names":["bufferToStream","buffer","stream","Duplex","push","copyFromBinary","connectionLogger","connection","clientConfiguration","rawSql","boundValues","tupleList","columnTypes","slonik","native","UnexpectedStateError","payloadBuffer","undefined","finalConnection","finalSql","copyFromBinaryStream","query","pipe","Promise","resolve","reject","on","error"],"mappings":";;;;;;;AAEA;;AAGA;;AAGA;;AAMA;;AAGA;;AAIA,MAAMA,cAAc,GAAIC,MAAD,IAAY;AACjC,QAAMC,MAAM,GAAG,IAAIC,cAAJ,EAAf;AAEAD,EAAAA,MAAM,CAACE,IAAP,CAAYH,MAAZ;AACAC,EAAAA,MAAM,CAACE,IAAP,CAAY,IAAZ;AAEA,SAAOF,MAAP;AACD,CAPD;;AASA,MAAMG,cAAkD,GAAG,OACzDC,gBADyD,EAEzDC,UAFyD,EAGzDC,mBAHyD,EAIzDC,MAJyD,EAKzDC,WALyD,EAMzDC,SANyD,EAOzDC,WAPyD,KAQtD;AACH,MAAIL,UAAU,CAACA,UAAX,CAAsBM,MAAtB,CAA6BC,MAAjC,EAAyC;AACvC,UAAM,IAAIC,4BAAJ,CAAyB,yEAAzB,CAAN;AACD;;AAED,QAAMC,aAAa,GAAG,MAAM,gCAAgBL,SAAhB,EAA2BC,WAA3B,CAA5B;AAEA,SAAO,4BACLN,gBADK,EAELC,UAFK,EAGLC,mBAHK,EAILC,MAJK,EAKLC,WALK,EAMLO,SANK,EAOL,CAACC,eAAD,EAAkBC,QAAlB,KAA+B;AAC7B,UAAMC,oBAAoB,GAAGF,eAAe,CAACG,KAAhB,CAAsB,yBAAKF,QAAL,CAAtB,CAA7B;AAEAnB,IAAAA,cAAc,CAACgB,aAAD,CAAd,CAA8BM,IAA9B,CAAmCF,oBAAnC;AAEA,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCL,MAAAA,oBAAoB,CAACM,EAArB,CAAwB,OAAxB,EAAkCC,KAAD,IAAW;AAC1CF,QAAAA,MAAM,CAACE,KAAD,CAAN;AACD,OAFD;AAIAP,MAAAA,oBAAoB,CAACM,EAArB,CAAwB,KAAxB,EAA+B,MAAM;AACnC;AACAF,QAAAA,OAAO,CAAC,EAAD,CAAP;AACD,OAHD;AAID,KATM,CAAP;AAUD,GAtBI,CAAP;AAwBD,CAvCD;;eAyCenB,c","sourcesContent":["// @flow\n\nimport {\n  Duplex,\n} from 'stream';\nimport {\n  from,\n} from 'pg-copy-streams';\nimport {\n  executeQuery,\n} from '../routines';\nimport type {\n  InternalCopyFromBinaryFunctionType,\n} from '../types';\nimport {\n  encodeTupleList,\n} from '../utilities';\nimport {\n  UnexpectedStateError,\n} from '../errors';\n\nconst bufferToStream = (buffer) => {\n  const stream = new Duplex();\n\n  stream.push(buffer);\n  stream.push(null);\n\n  return stream;\n};\n\nconst copyFromBinary: InternalCopyFromBinaryFunctionType = async (\n  connectionLogger,\n  connection,\n  clientConfiguration,\n  rawSql,\n  boundValues,\n  tupleList,\n  columnTypes,\n) => {\n  if (connection.connection.slonik.native) {\n    throw new UnexpectedStateError('COPY streams do not work with the native driver. Use JavaScript driver.');\n  }\n\n  const payloadBuffer = await encodeTupleList(tupleList, columnTypes);\n\n  return executeQuery(\n    connectionLogger,\n    connection,\n    clientConfiguration,\n    rawSql,\n    boundValues,\n    undefined,\n    (finalConnection, finalSql) => {\n      const copyFromBinaryStream = finalConnection.query(from(finalSql));\n\n      bufferToStream(payloadBuffer).pipe(copyFromBinaryStream);\n\n      return new Promise((resolve, reject) => {\n        copyFromBinaryStream.on('error', (error) => {\n          reject(error);\n        });\n\n        copyFromBinaryStream.on('end', () => {\n          // $FlowFixMe\n          resolve({});\n        });\n      });\n    },\n  );\n};\n\nexport default copyFromBinary;\n"],"file":"copyFromBinary.js"}