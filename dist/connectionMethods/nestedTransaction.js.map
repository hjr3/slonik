{"version":3,"sources":["../../src/connectionMethods/nestedTransaction.js"],"names":["nestedTransaction","parentLog","connection","clientConfiguration","handler","transactionDepth","newTransactionDepth","slonik","mock","query","log","child","transactionId","result","error"],"mappings":";;;;;;;AAEA;;AAGA;;AAGA;;AAOA,MAAMA,iBAAwD,GAAG,OAAOC,SAAP,EAAkBC,UAAlB,EAA8BC,mBAA9B,EAAmDC,OAAnD,EAA4DC,gBAA5D,KAAiF;AAChJ,QAAMC,mBAAmB,GAAGD,gBAAgB,GAAG,CAA/C;;AAEA,MAAIH,UAAU,CAACA,UAAX,CAAsBK,MAAtB,CAA6BC,IAA7B,KAAsC,KAA1C,EAAiD;AAC/C,UAAMN,UAAU,CAACO,KAAX,CAAiB,gCAAgCH,mBAAjD,CAAN;AACD;;AAED,QAAMI,GAAG,GAAGT,SAAS,CAACU,KAAV,CAAgB;AAC1BC,IAAAA,aAAa,EAAE;AADW,GAAhB,CAAZ;;AAIA,MAAI;AACFV,IAAAA,UAAU,CAACA,UAAX,CAAsBK,MAAtB,CAA6BF,gBAA7B,GAAgDC,mBAAhD;AAEA,UAAMO,MAAM,GAAG,MAAMT,OAAO,CAAC,wCAA0BM,GAA1B,EAA+BR,UAA/B,EAA2CC,mBAA3C,EAAgEG,mBAAhE,CAAD,CAA5B;AAEA,WAAOO,MAAP;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACd,QAAIZ,UAAU,CAACA,UAAX,CAAsBK,MAAtB,CAA6BC,IAA7B,KAAsC,KAA1C,EAAiD;AAC/C,YAAMN,UAAU,CAACO,KAAX,CAAiB,4CAA4CH,mBAA7D,CAAN;AACD;;AAEDI,IAAAA,GAAG,CAACI,KAAJ,CAAU;AACRA,MAAAA,KAAK,EAAE,oCAAeA,KAAf;AADC,KAAV,EAEG,0CAFH;AAIA,UAAMA,KAAN;AACD,GAhBD,SAgBU;AACRZ,IAAAA,UAAU,CAACA,UAAX,CAAsBK,MAAtB,CAA6BF,gBAA7B,GAAgDC,mBAAmB,GAAG,CAAtE;AACD;AACF,CA9BD;;eAgCeN,iB","sourcesContent":["// @flow\n\nimport {\n  serializeError,\n} from 'serialize-error';\nimport {\n  bindTransactionConnection,\n} from '../binders';\nimport {\n  createUlid,\n} from '../utilities';\nimport type {\n  InternalNestedTransactionFunctionType,\n} from '../types';\n\nconst nestedTransaction: InternalNestedTransactionFunctionType = async (parentLog, connection, clientConfiguration, handler, transactionDepth) => {\n  const newTransactionDepth = transactionDepth + 1;\n\n  if (connection.connection.slonik.mock === false) {\n    await connection.query('SAVEPOINT slonik_savepoint_' + newTransactionDepth);\n  }\n\n  const log = parentLog.child({\n    transactionId: createUlid(),\n  });\n\n  try {\n    connection.connection.slonik.transactionDepth = newTransactionDepth;\n\n    const result = await handler(bindTransactionConnection(log, connection, clientConfiguration, newTransactionDepth));\n\n    return result;\n  } catch (error) {\n    if (connection.connection.slonik.mock === false) {\n      await connection.query('ROLLBACK TO SAVEPOINT slonik_savepoint_' + newTransactionDepth);\n    }\n\n    log.error({\n      error: serializeError(error),\n    }, 'rolling back transaction due to an error');\n\n    throw error;\n  } finally {\n    connection.connection.slonik.transactionDepth = newTransactionDepth - 1;\n  }\n};\n\nexport default nestedTransaction;\n"],"file":"nestedTransaction.js"}