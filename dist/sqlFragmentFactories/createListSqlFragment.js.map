{"version":3,"sources":["../../src/sqlFragmentFactories/createListSqlFragment.js"],"names":["token","greatestParameterPosition","values","placeholders","placeholderIndex","members","length","InvalidInputError","member","sqlFragment","push","sql","join","glue"],"mappings":";;;;;;;AAMA;;AAGA;;AAIA;;+BAKgBA,K,EAAyBC,yB,KAAuD;AAC9F,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,YAAY,GAAG,EAArB;AAEA,MAAIC,gBAAgB,GAAGH,yBAAvB;;AAEA,MAAID,KAAK,CAACK,OAAN,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAIC,yBAAJ,CAAsB,yCAAtB,CAAN;AACD;;AAED,OAAK,MAAMC,MAAX,IAAqBR,KAAK,CAACK,OAA3B,EAAoC;AAClC,QAAI,2BAAWG,MAAX,CAAJ,EAAwB;AACtB,YAAMC,WAAW,GAAG,0CAA0BD,MAA1B,EAAkCJ,gBAAlC,CAApB;AAEAD,MAAAA,YAAY,CAACO,IAAb,CAAkBD,WAAW,CAACE,GAA9B;AACAP,MAAAA,gBAAgB,IAAIK,WAAW,CAACP,MAAZ,CAAmBI,MAAvC;AACAJ,MAAAA,MAAM,CAACQ,IAAP,CAAY,GAAGD,WAAW,CAACP,MAA3B;AACD,KAND,MAMO,IAAI,2CAA2BM,MAA3B,CAAJ,EAAwC;AAC7CL,MAAAA,YAAY,CAACO,IAAb,CAAkB,MAAM,EAAEN,gBAA1B;AAEAF,MAAAA,MAAM,CAACQ,IAAP,CAAYF,MAAZ;AACD,KAJM,MAIA;AACL,YAAM,IAAID,yBAAJ,CAAsB,gFAAtB,CAAN;AACD;AACF;;AAED,SAAO;AACL;AACAI,IAAAA,GAAG,EAAER,YAAY,CAACS,IAAb,CAAkBZ,KAAK,CAACa,IAAN,CAAWF,GAA7B,CAFA;AAGLT,IAAAA,MAAM,EAAE,gDAAgCA,MAAhC;AAHH,GAAP;AAKD,C","sourcesContent":["// @flow\n\nimport type {\n  SqlFragmentType,\n  ListSqlTokenType,\n} from '../types';\nimport {\n  InvalidInputError,\n} from '../errors';\nimport {\n  isPrimitiveValueExpression,\n  isSqlToken,\n} from '../utilities';\nimport {\n  createPrimitiveValueExpressions,\n  createSqlTokenSqlFragment,\n} from '../factories';\n\nexport default (token: ListSqlTokenType, greatestParameterPosition: number): SqlFragmentType => {\n  const values = [];\n  const placeholders = [];\n\n  let placeholderIndex = greatestParameterPosition;\n\n  if (token.members.length === 0) {\n    throw new InvalidInputError('Value list must have at least 1 member.');\n  }\n\n  for (const member of token.members) {\n    if (isSqlToken(member)) {\n      const sqlFragment = createSqlTokenSqlFragment(member, placeholderIndex);\n\n      placeholders.push(sqlFragment.sql);\n      placeholderIndex += sqlFragment.values.length;\n      values.push(...sqlFragment.values);\n    } else if (isPrimitiveValueExpression(member)) {\n      placeholders.push('$' + ++placeholderIndex);\n\n      values.push(member);\n    } else {\n      throw new InvalidInputError('Invalid list member type. Must be a SQL token or a primitive value expression.');\n    }\n  }\n\n  return {\n    // $FlowFixMe\n    sql: placeholders.join(token.glue.sql),\n    values: createPrimitiveValueExpressions(values),\n  };\n};\n"],"file":"createListSqlFragment.js"}